/**
 * Global CSS Styles
 * 
 * Technical Implementation:
 * - Implements TailwindCSS base styles
 * - Defines custom CSS variables for theming
 * - Creates utility classes for animations
 * - Optimizes performance with hardware acceleration
 */

@tailwind base;
@tailwind components;
@tailwind utilities;

/**
 * CSS Variables for Theming
 * 
 * Technical Implementation:
 * - Uses CSS custom properties for dynamic values
 * - Implements dark theme by default
 * - Provides fallback values for older browsers
 */
:root {
  --foreground-rgb: 255, 255, 255;
  --background-start-rgb: 0, 0, 0;
  --background-end-rgb: 0, 0, 0;
}

/**
 * Base Styles
 * 
 * Technical Implementation:
 * - Sets up dark theme by default
 * - Implements smooth scrolling
 * - Optimizes text rendering
 */
body {
  color: rgb(var(--foreground-rgb));
  background: linear-gradient(
    to bottom,
    rgb(var(--background-start-rgb)),
    rgb(var(--background-end-rgb))
  );
  min-height: 100vh;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

/**
 * Custom Scrollbar
 * 
 * Technical Implementation:
 * - Creates minimal, cyberpunk-style scrollbar
 * - Implements smooth scrolling behavior
 * - Maintains accessibility
 */
::-webkit-scrollbar {
  width: 4px;
}

::-webkit-scrollbar-track {
  background: #000;
}

::-webkit-scrollbar-thumb {
  background: #fff;
  border-radius: 2px;
}

::-webkit-scrollbar-thumb:hover {
  background: #00ffff;
}

/**
 * Selection Styles
 * 
 * Technical Implementation:
 * - Customizes text selection appearance
 * - Maintains contrast for readability
 * - Implements cyberpunk aesthetic
 */
::selection {
  background: #00ffff;
  color: #000;
  text-shadow: none;
}

/**
 * Scanline Effect
 * 
 * Technical Implementation:
 * - Creates CRT monitor scanline effect
 * - Uses pseudo-element for performance
 * - Implements hardware acceleration
 */
.scanline {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: repeating-linear-gradient(
    to bottom,
    transparent 0%,
    rgba(255, 255, 255, 0.05) 0.5%,
    transparent 1%
  );
  pointer-events: none;
  z-index: 15;
  animation: scanline 10s linear infinite;
}

/**
 * Noise Effect
 * 
 * Technical Implementation:
 * - Creates static noise overlay
 * - Uses pseudo-element for performance
 * - Implements hardware acceleration
 */
.noise {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 256 256' xmlns='http://www.w3.org/2000/svg'%3E%3Cfilter id='noiseFilter'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='0.65' numOctaves='3' stitchTiles='stitch'/%3E%3C/filter%3E%3Crect width='100%25' height='100%25' filter='url(%23noiseFilter)'/%3E%3C/svg%3E");
  opacity: 0.05;
  pointer-events: none;
  z-index: 10;
}

/**
 * Glitch Text Effect
 * 
 * Technical Implementation:
 * - Creates text glitch animation
 * - Uses text-shadow for performance
 * - Implements hardware acceleration
 */
.glitch {
  position: relative;
  animation: glitch 1s linear infinite;
  text-shadow: 2px 2px #00ffff, -2px -2px #ff00ff;
}

/**
 * Utility Classes
 * 
 * Technical Implementation:
 * - Defines reusable animation classes
 * - Implements performance optimizations
 * - Maintains consistent styling
 */
@layer utilities {
  .text-balance {
    text-wrap: balance;
  }
  
  .text-pretty {
    text-wrap: pretty;
  }
  
  .hardware-accelerated {
    transform: translateZ(0);
    backface-visibility: hidden;
    perspective: 1000px;
  }
}

@keyframes scanline {
  0% {
    transform: translateY(0);
  }
  100% {
    transform: translateY(100vh);
  }
}

@keyframes glitch {
  2%, 64% {
    transform: translate(2px, 0) skew(0deg);
  }
  4%, 60% {
    transform: translate(-2px, 0) skew(0deg);
  }
  62% {
    transform: translate(0, 0) skew(5deg);
  }
} 